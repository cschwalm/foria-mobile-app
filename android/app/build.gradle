def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    println 'Loading signing config from key.properties.'
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 29

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "com.foriatickets.foria"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release
    }

    buildTypes {
        release {

            signingConfig signingConfigs.release

            minifyEnabled true
            useProguard false
            debuggable false

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

if (keystoreProperties['keyAlias'] != null) {

    android.signingConfigs.release.keyAlias keystoreProperties['keyAlias']
    android.signingConfigs.release.keyPassword keystoreProperties['keyPassword']
    android.signingConfigs.release.storeFile file(keystoreProperties['storeFile'])
    android.signingConfigs.release.storePassword keystoreProperties['storePassword']
} else {
    println 'Signing config not found in key.properties. Signing skipped...'
    android.buildTypes.release.signingConfig = null
}

flutter {
    source '../..'
}

dependencies {
    implementation "androidx.exifinterface:exifinterface:1.1.0-rc01"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.3.0-alpha02'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0-alpha02'
}

apply plugin: 'com.google.gms.google-services'
